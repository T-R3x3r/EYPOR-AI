Simplified Agent v2 Workflow Diagram (Updated with Edit Feature)
===============================================================

START
  |
classify_request (Request Classification)
  |
+-----------------+-----------------+-----------------+-----------------+-----------------+
|     chat        |   sql_query     | visualization   | file_edit       | db_modification |
|     Path        |     Path        |     Path        |     Path        |     Path        |
+-----------------+-----------------+-----------------+-----------------+-----------------+
  |                 |                 |                 |                 |
handle_chat    handle_sql_query  handle_visualization  handle_file_edit  prepare_db_modification
  |                 |                 |                 |                 |
respond         execute_code      execute_code          execute_code      execute_db_modification
  |                 |                 |                 |                 |
END              respond           respond              respond           respond
                 |                 |                    |                 |
                END               END                  END              END

Scenario Comparison Path:
START → classify_request → extract_scenarios → handle_scenario_comparison → execute_code → respond → END

Node Descriptions:
=================
* classify_request: Analyzes user input and routes to appropriate handler
* extract_scenarios: Extracts scenario names from comparison requests using regex patterns
* handle_chat: Processes general Q&A without code execution
* handle_sql_query: Generates SQL query scripts with Plotly table output
* handle_visualization: Creates chart/graph generation scripts (single scenario)
* handle_file_edit: Handles file editing requests with modification tracking
* handle_scenario_comparison: Generates multi-scenario comparison analysis
* prepare_db_modification: Prepares database parameter changes with validation
* execute_code: Executes generated Python scripts for SQL, visualization, and file editing
* execute_db_modification: Performs database modifications with percentage calculations
* respond: Generates final response to user with context and file information

Workflow Paths:
==============
1. Chat Path: START → classify_request → handle_chat → respond → END
2. SQL Path: START → classify_request → handle_sql_query → execute_code → respond → END
3. Visualization Path: START → classify_request → handle_visualization → execute_code → respond → END
4. File Edit Path: START → classify_request → handle_file_edit → execute_code → respond → END
5. Scenario Comparison Path: START → classify_request → extract_scenarios → handle_scenario_comparison → execute_code → respond → END
6. DB Modification Path: START → classify_request → prepare_db_modification → execute_db_modification → respond → END

New Edit Feature Details:
========================
* File Editing: Supports editing existing Python files with modification tracking
* Context Preservation: Maintains original file content and modification history
* Validation: Validates file modifications before execution
* Query Tracking: Maps queries to modified files for future reference
* Execution Integration: Modified files are executed through the standard execute_code node
* Database Context: Uses current scenario's database context for file operations
* Error Handling: Comprehensive error handling for file operations
* History Tracking: Maintains modification history with timestamps and query IDs

State Information Flow:
======================
* AgentState: Contains all workflow state including edit mode, file paths, and modification history
* DatabaseContext: Provides scenario-aware database routing and schema information
* Edit Mode Fields: edit_mode, editing_file_path, original_file_content, file_modification_history
* Query Tracking: query_file_mappings, current_query_context for linking queries to files
* Comparison Fields: comparison_scenarios, comparison_data, comparison_type for multi-scenario operations
